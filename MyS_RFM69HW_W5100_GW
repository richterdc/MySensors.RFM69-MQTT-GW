/*
 * The MySensors Arduino library handles the wireless radio link and protocol
 * between your home built sensors/actuators and HA controller of choice.
 * The sensors forms a self healing radio network with optional repeaters. Each
 * repeater and gateway builds a routing tables in EEPROM which keeps track of the
 * network topology allowing messages to be routed to nodes.
 *
 * Created by Henrik Ekblad <henrik.ekblad@mysensors.org>
 * Copyright (C) 2013-2018 Sensnology AB
 * Full contributor list: https://github.com/mysensors/MySensors/graphs/contributors
 *
 * Documentation: http://www.mysensors.org
 * Support Forum: http://forum.mysensors.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 *******************************
 *
 * REVISION HISTORY
 * Version 1.0 - Henrik Ekblad
 *
 * DESCRIPTION
 * The W5100 MQTT gateway sends radio network (or locally attached sensors) data to your MQTT broker.
 * The node also listens to MY_MQTT_TOPIC_PREFIX and sends out those messages to the radio network
 *
 * LED purposes:
 * - To use the feature, uncomment WITH_LEDS_BLINKING in MyConfig.h
 * - RX (green) - blink fast on radio message received. In inclusion mode will blink fast only on presentation received
 * - TX (yellow) - blink fast on radio message transmitted. In inclusion mode will blink slowly
 * - ERR (red) - fast blink on error during transmission error or receive crc error
 *
 *
 *
 * Hardware SHA204 signing is currently not supported!
 *
 *
*/

// Enable debug prints to serial monitor - Disable once good.
#define MY_DEBUG
#define MY_DEBUG_VERBOSE_RFM69

// Enables and select radio type and Freq for RFM69 - Must use New Driver with W5100.
#define MY_RADIO_RFM69
#define MY_IS_RFM69HW
#define MY_RFM69_FREQUENCY RFM69_433MHZ
#define MY_RFM69_NEW_DRIVER

// W5100 and RFM69 require we move some pins around.
#define MY_RFM69_CS_PIN 6
#define MY_RFM69_IRQ_PIN 5
//#define MY_RFM69_SPI_CS 6
#define MY_RFM69_IRQ_NUM MY_RFM69_IRQ_PIN

// Set the Network ID - Defaults to 100.
//#define MY_RFM69_NETWORKID 101

// Set Gateway Type - Uncomment one.
#define MY_GATEWAY_MQTT_CLIENT
//#define MY_GATEWAY_W5100

// W5100 Ethernet module SPI enable (optional if using a shield/module that manages SPI_EN signal)
//#define MY_W5100_SPI_EN 4
// W5100 and RFM69 will fight over MISO/MOSI since W5100 wont release.
#if !defined(MY_W5100_SPI_EN) && !defined(ARDUINO_ARCH_SAMD)
#define MY_SOFTSPI
#define MY_SOFT_SPI_SCK_PIN 14
#define MY_SOFT_SPI_MISO_PIN 16
#define MY_SOFT_SPI_MOSI_PIN 15
#endif

/*
// When W5100 is connected we have to move CE/CSN pins for NRF Radio... I think the RFM69 doesn't need this will remove on next revision.
#ifndef MY_RF24_CE_PIN
#define MY_RF24_CE_PIN 5
#endif
#ifndef MY_RF24_CS_PIN
#define MY_RF24_CS_PIN 6
#endif
*/

// MQTT SETTINGS
// Set this node's subscribe and publish topic prefix for MQTT.
#define MY_MQTT_PUBLISH_TOPIC_PREFIX "MSG-RFM69-Node1-out"
#define MY_MQTT_SUBSCRIBE_TOPIC_PREFIX "MSG-RFM69-Node1-in"

// Set MQTT client id
#define MY_MQTT_CLIENT_ID "MSG-RFM69-Node1"

// Enable these if your MQTT broker requires username/password
#define MY_MQTT_USER "mqttuser"
#define MY_MQTT_PASSWORD "mqttpass"

// MQTT broker ip address or url. Define one or the other.
//#define MY_CONTROLLER_URL_ADDRESS "mqtt.example.com"
#define MY_CONTROLLER_IP_ADDRESS 10,10,10,10

// The MQTT broker port to open
#define MY_PORT 1883

// ETHERNET SETTINGS
// Set Static IP or Comment out for DHCP.
#define MY_IP_ADDRESS 10,10,10,52
#define MY_IP_GATEWAY_ADDRESS 10,10,10,1
#define MY_IP_SUBNET_ADDRESS 255,255,255,0

// With W5100 you need to define a MAC Address that is Unique.
#define MY_MAC_ADDRESS 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED

/*
// Enable inclusion mode - Uncoment this section to setup inclusion mode.
#define MY_INCLUSION_MODE_FEATURE
// Enable Inclusion mode button on gateway
#define MY_INCLUSION_BUTTON_FEATURE
// Set inclusion mode duration (in seconds)
#define MY_INCLUSION_MODE_DURATION 60
// Digital pin used for inclusion mode button
#define MY_INCLUSION_MODE_BUTTON_PIN  3
*/

// Set blinking period
#define MY_DEFAULT_LED_BLINK_PERIOD 300

// Flash leds on rx/tx/err
#define MY_DEFAULT_ERR_LED_PIN 9  // Error led pin
#define MY_DEFAULT_RX_LED_PIN  7  // Receive led pin
#define MY_DEFAULT_TX_LED_PIN  8  // Transmit led pin

#if defined(MY_USE_UDP)
#include <EthernetUdp.h>
#endif

#include <SPI.h>
#include <Ethernet.h>
#include <MySensors.h>

void setup()
{
  
}
void presentation()
{
    // Present locally attached sensors here
}

void loop()
{
    // Send locally attached sensors data here
}
